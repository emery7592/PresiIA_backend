#!/usr/bin/env python3
"""
Script de test pour le syst√®me de paiement Stripe
"""

import sys
import os
import asyncio
from unittest.mock import Mock, patch

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """Test que tous les imports fonctionnent"""
    print("üîç Test des imports...")
    
    try:
        from app.database.database import get_database, create_tables
        print("‚úÖ Import database OK")
        
        from app.auth.models import User, Subscription, Payment, PlatformEnum, SubscriptionStatusEnum, PaymentStatusEnum
        print("‚úÖ Import models OK")
        
        from app.auth.schemas import UserRegister, PaymentIntentRequest, PaymentConfirmRequest
        print("‚úÖ Import schemas OK")
        
        from app.auth.services import hash_password, create_access_token
        print("‚úÖ Import auth services OK")
        
        from app.payment.services import StripeService, create_payment_intent_service
        print("‚úÖ Import payment services OK")
        
        from app.payment.router import router as payment_router
        print("‚úÖ Import payment router OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False

def test_database_connection():
    """Test la connexion √† la base de donn√©es"""
    print("\nüîç Test de la connexion √† la base de donn√©es...")
    
    try:
        from app.database.database import check_database_connection
        
        if check_database_connection():
            print("‚úÖ Connexion √† la base de donn√©es OK")
            return True
        else:
            print("‚ùå √âchec de la connexion √† la base de donn√©es")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def test_stripe_configuration():
    """Test la configuration Stripe"""
    print("\nüîç Test de la configuration Stripe...")
    
    import os
    from dotenv import load_dotenv
    
    load_dotenv()
    
    stripe_secret = os.getenv("STRIPE_SECRET_KEY")
    stripe_public = os.getenv("STRIPE_PUBLIC_KEY")
    stripe_webhook = os.getenv("STRIPE_WEBHOOK_SECRET")
    stripe_price = os.getenv("STRIPE_PRICE_ID")
    
    if stripe_secret:
        print("‚úÖ STRIPE_SECRET_KEY configur√©")
    else:
        print("‚ö†Ô∏è  STRIPE_SECRET_KEY manquant")
    
    if stripe_public:
        print("‚úÖ STRIPE_PUBLIC_KEY configur√©")
    else:
        print("‚ö†Ô∏è  STRIPE_PUBLIC_KEY manquant")
    
    if stripe_webhook:
        print("‚úÖ STRIPE_WEBHOOK_SECRET configur√©")
    else:
        print("‚ö†Ô∏è  STRIPE_WEBHOOK_SECRET manquant")
    
    if stripe_price:
        print("‚úÖ STRIPE_PRICE_ID configur√©")
    else:
        print("‚ö†Ô∏è  STRIPE_PRICE_ID manquant")
    
    return bool(stripe_secret and stripe_public)

def test_models():
    """Test la cr√©ation des mod√®les"""
    print("\nüîç Test des mod√®les...")
    
    try:
        from app.auth.models import User, Subscription, Payment, PlatformEnum, SubscriptionStatusEnum, PaymentStatusEnum
        
        # Test cr√©ation d'un utilisateur
        user = User(
            email="test@example.com",
            first_name="Test",
            last_name="User",
            device_id="test_device_123",
            platform=PlatformEnum.ios,
            is_registered=True
        )
        print("‚úÖ Cr√©ation User OK")
        
        # Test cr√©ation d'un abonnement
        subscription = Subscription(
            user_id=user.id,
            stripe_subscription_id="sub_test_123",
            stripe_price_id="price_test_123",
            status=SubscriptionStatusEnum.active
        )
        print("‚úÖ Cr√©ation Subscription OK")
        
        # Test cr√©ation d'un paiement
        payment = Payment(
            user_id=user.id,
            subscription_id=subscription.id,
            stripe_payment_intent_id="pi_test_123",
            amount=9.99,
            currency="eur",
            status=PaymentStatusEnum.completed
        )
        print("‚úÖ Cr√©ation Payment OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation mod√®les: {e}")
        return False

def test_schemas():
    """Test la validation des sch√©mas"""
    print("\nüîç Test des sch√©mas Pydantic...")
    
    try:
        from app.auth.schemas import UserRegister, PaymentIntentRequest, PaymentConfirmRequest
        from app.auth.models import PlatformEnum
        
        # Test UserRegister
        user_data = {
            "email": "test@example.com",
            "password": "password123",
            "firstName": "Test",
            "lastName": "User",
            "device_id": "test_device_123",
            "platform": PlatformEnum.ios
        }
        user_register = UserRegister(**user_data)
        print("‚úÖ Validation UserRegister OK")
        
        # Test PaymentIntentRequest
        payment_data = {
            "email": "test@example.com",
            "firstName": "Test",
            "lastName": "User",
            "device_id": "test_device_123",
            "platform": PlatformEnum.ios
        }
        payment_request = PaymentIntentRequest(**payment_data)
        print("‚úÖ Validation PaymentIntentRequest OK")
        
        # Test PaymentConfirmRequest
        confirm_data = {
            "payment_intent_id": "pi_test_123",
            "email": "test@example.com",
            "password": "password123",
            "firstName": "Test",
            "lastName": "User",
            "device_id": "test_device_123",
            "platform": PlatformEnum.ios
        }
        confirm_request = PaymentConfirmRequest(**confirm_data)
        print("‚úÖ Validation PaymentConfirmRequest OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur validation sch√©mas: {e}")
        return False

def test_services():
    """Test les services"""
    print("\nüîç Test des services...")
    
    try:
        from app.auth.services import hash_password, verify_password
        
        # Test hashage de mot de passe
        password = "test_password"
        hashed = hash_password(password)
        print("‚úÖ Hashage mot de passe OK")
        
        # Test v√©rification de mot de passe
        if verify_password(password, hashed):
            print("‚úÖ V√©rification mot de passe OK")
        else:
            print("‚ùå V√©rification mot de passe √©chou√©e")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur services: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üß™ Test du syst√®me de paiement Stripe")
    print("=" * 50)
    
    tests = [
        ("Imports", test_imports),
        ("Connexion base de donn√©es", test_database_connection),
        ("Configuration Stripe", test_stripe_configuration),
        ("Mod√®les", test_models),
        ("Sch√©mas", test_schemas),
        ("Services", test_services)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erreur lors du test {test_name}: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("üìä R√©sultats des tests:")
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"  {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ Score: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s ! Le syst√®me est pr√™t.")
        return True
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez la configuration.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
